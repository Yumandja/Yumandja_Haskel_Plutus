TACHE4

âœ… TÃ¢che 4 â€“ Composer une fonction pour traiter des donnÃ©es de joueurs
ðŸ”¢ Code Haskell :
# âœ… TÃ¢che 4 â€“ Composer une fonction pour traiter des donnÃ©es de joueurs


## ðŸ”¢ Code Haskell :
```haskell
import Data.List (sortBy)

-- Trie la liste des joueurs par score dÃ©croissant
sortByScore :: [(String, Int)] -> [(String, Int)]
sortByScore = reverse . sortBy (\(_, s1) (_, s2) -> compare s1 s2)

-- Extrait les noms des joueurs (la 1Ã¨re valeur de chaque tuple)
extractPlayers :: [(String, Int)] -> [String]
extractPlayers = map fst

-- Prend les 3 premiers Ã©lÃ©ments d'une liste
topThree :: [a] -> [a]
topThree = take 3

-- Compose les fonctions : trie â†’ extrait les noms â†’ garde les 3 premiers
getTopThreePlayers :: [(String, Int)] -> [String]
getTopThreePlayers = topThree . extractPlayers . sortByScore

-- Fonction principale pour tester
main :: IO ()
main = do
    let joueurs = [("Alice", 42), ("Bob", 55), ("Charlie", 28), ("Diana", 70), ("Eve", 61)]
    let topJoueurs = getTopThreePlayers joueurs
    putStrLn "Top 3 des joueurs :"
    mapM_ putStrLn topJoueurs
```



ðŸ“š Explications :
sortByScore trie la liste des tuples (nom, score) selon le score dÃ©croissant.

compare s1 s2 â†’ trie croissant.

reverse â†’ on inverse pour avoir dÃ©croissant.

extractPlayers applique map fst pour extraire les noms des tuples.

topThree garde les 3 premiers Ã©lÃ©ments avec take 3.

getTopThreePlayers compose tout Ã§a : trie â†’ extrait les noms â†’ prend les 3 premiers.

main crÃ©e une liste de joueurs, applique getTopThreePlayers, puis les affiche.





